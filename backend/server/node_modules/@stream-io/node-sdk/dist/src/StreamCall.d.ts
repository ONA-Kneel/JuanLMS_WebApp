import { VideoApi } from './gen-imports';
import { CallResponse, GetOrCreateCallRequest, QueryCallMembersRequest } from './gen/models';
import { CallApi } from './gen/video/CallApi';
import { StreamClient } from './StreamClient';
import { OmitTypeId } from './types';
export declare class StreamCall extends CallApi {
    readonly type: string;
    readonly id: string;
    private readonly streamClient;
    data?: CallResponse;
    constructor(videoApi: VideoApi, type: string, id: string, streamClient: StreamClient);
    get cid(): string;
    create: (request?: GetOrCreateCallRequest) => Promise<import("./types").StreamResponse<import("./gen/models").GetOrCreateCallResponse>>;
    queryMembers: (request?: OmitTypeId<QueryCallMembersRequest>) => Promise<import("./types").StreamResponse<import("./gen/models").QueryCallMembersResponse>>;
    getOrCreate: (request?: GetOrCreateCallRequest) => Promise<import("./types").StreamResponse<import("./gen/models").GetOrCreateCallResponse>>;
    get: () => Promise<import("./types").StreamResponse<import("./gen/models").GetCallResponse>>;
    createSRTCredentials: (userID: string) => {
        address: string;
    };
}
